<?xml version="1.0" encoding="UTF-8"?>
<launch>

    <arg name="world"/>
    <arg name="robot_name"/>
    <arg name="robot_type"/>

    <arg name="link_name" default="base_link"/>
    <arg name="sensor_prefix" default="/world/map/model/$(var robot_name)/link/$(var link_name)/sensor"/>

    <node
        pkg="ros_gz_bridge"
        exec="parameter_bridge"
        name="ros_gz_bridge_clock"
        args="/clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock">
    </node>

    <node
        pkg="ros_gz_bridge"
        exec="parameter_bridge"
        name="ros_gz_bridge_pose"
        args="/model/$(var robot_name)/pose@tf2_msgs/msg/TFMessage[gz.msgs.Pose_V">
        <remap from="/model/$(var robot_name)/pose" to="/tf"/>
    </node>

    <node
        pkg="ros_gz_bridge"
        exec="parameter_bridge"
        name="ros_gz_bridge_pose_static"
        args="/model/$(var robot_name)/pose_static@tf2_msgs/msg/TFMessage[gz.msgs.Pose_V">
        <remap from="/model/$(var robot_name)/pose_static" to="/tf_static"/>
        <param name="qos_overrides./tf_static.publisher.durability" value="transient_local"/>
        <param name="qos_overrides./tf_static.publisher.reliability" value="reliable"/>
        <param name="qos_overrides./tf_static.publisher.history" value="keep_last"/>
        <param name="qos_overrides./tf_static.publisher.depth" value="1"/>
    </node>

    <group>
        <push-ros-namespace namespace="$(var robot_name)"/>

        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_cmd_twist"
            args="/model/$(var robot_name)/cmd/acc@geometry_msgs/msg/Twist@gz.msgs.Twist">
            <remap from="/model/$(var robot_name)/cmd/acc" to="cmd/acc"/>
        </node>

        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_cmd_quat"
            args="/model/$(var robot_name)/cmd/att@geometry_msgs/msg/Quaternion@gz.msgs.Quaternion">
            <remap from="/model/$(var robot_name)/cmd/att" to="cmd/att"/>
        </node>

        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_odom"
            args="/model/$(var robot_name)/odometry@nav_msgs/msg/Odometry[gz.msgs.Odometry">
            <remap from="/model/$(var robot_name)/odometry" to="odom"/>
        </node>

        <!-- RGBD camera -->
        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_depth_camera_info"
            args="$(var sensor_prefix)/depth_cam/camera_info@sensor_msgs/msg/CameraInfo[gz.msgs.CameraInfo">
            <remap from="$(var sensor_prefix)/depth_cam/camera_info" to="cam/camera_info"/>
       </node>

       <node
            pkg="ros_gz_image"
            exec="image_bridge"
            name="ros_gz_bridge_rgb_camera_image"
            args="$(var sensor_prefix)/rgb_cam/image">
            <remap from="$(var sensor_prefix)/rgb_cam/image" to="cam/rgb"/>
            <remap from="$(var sensor_prefix)/rgb_cam/image/compressed" to="cam/rgb/compressed"/>
            <remap from="$(var sensor_prefix)/rgb_cam/image/compressedDepth" to="cam/rgb/compressedDepth"/>
            <remap from="$(var sensor_prefix)/rgb_cam/image/theora" to="cam/rgb/theora"/>
       </node>

        <node
            pkg="ros_gz_image"
            exec="image_bridge"
            name="ros_gz_bridge_depth_camera_image"
            args="$(var sensor_prefix)/depth_cam/depth_image">
            <remap from="$(var sensor_prefix)/depth_cam/depth_image" to="cam/depth"/>
            <remap from="$(var sensor_prefix)/depth_cam/depth_image/compressed" to="cam/depth/compressed"/>
            <remap from="$(var sensor_prefix)/depth_cam/depth_image/compressedDepth" to="cam/depth/compressedDepth"/>
            <remap from="$(var sensor_prefix)/depth_cam/depth_image/theora" to="cam/depth/theora"/>
        </node>

        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_depth_camera_points"
            args="$(var sensor_prefix)/depth_cam/depth_image/points@sensor_msgs/msg/PointCloud2[gz.msgs.PointCloudPacked">
            <remap from="$(var sensor_prefix)/depth_cam/depth_image/points" to="cam/pc"/>
        </node>


        <!-- LIDAR -->
        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_lidar"
            args="$(var sensor_prefix)/lidar/scan/points@sensor_msgs/msg/PointCloud2[gz.msgs.PointCloudPacked">
            <remap from="$(var sensor_prefix)/lidar/scan/points" to="lidar/points"/>
        </node>


        <!-- IMU -->
        <node
            pkg="ros_gz_bridge"
            exec="parameter_bridge"
            name="ros_gz_bridge_imu"
            args="$(var sensor_prefix)/imu/imu@sensor_msgs/msg/Imu[gz.msgs.IMU">
            <remap from="$(var sensor_prefix)/imu/imu" to="imu"/>
        </node>

    </group>

</launch>
